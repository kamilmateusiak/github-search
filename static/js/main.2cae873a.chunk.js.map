{"version":3,"sources":["components/layout/styled.ts","components/layout/layout.tsx","components/user-repos/styled.ts","components/list/styled.ts","components/list/list.tsx","components/list/list-item.tsx","components/content-box/styled.ts","components/content-box/content-box.tsx","components/user-repos/skeleton.tsx","components/user-repos/user-repos.tsx","components/user-info/styled.ts","constants/font-size.ts","components/user-info/skeleton.tsx","components/user-info/user-info.tsx","components/search-input/styled.ts","components/search-input/input.tsx","components/search-input/search-input.tsx","constants/http-status.ts","services/api/api-client.ts","services/api/user/user-serializer.ts","services/api/user/user-api.ts","hooks/use-search-user.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["appBackground","container","header","content","title","Layout","props","css","children","link","shine","keyframes","listItemDummy","color","lightenAmount","lighten","loadingAnimation","list","listItem","List","ListItem","ContentBox","cssStyles","isLoading","error","isEmpty","loadingState","UserReposSkeleton","UserRepos","repos","length","map","repo","key","id","href","url","name","starsCount","FontSize","avatar","nameDummy","description","descriptionDummy","dummy","UserInfoSkeleton","UserInfo","user","avatarUrl","src","alt","login","field","Text","Input","label","onChange","value","type","SearchInput","delay","restProps","useState","searchPhrase","setSearchPhrase","debouncedChangeHandler","useRef","debounce","handleChange","useCallback","e","target","current","defaultProps","HTTPStatus","apiClient","api","this","axios","create","baseURL","options","requestResult","result","request","response","status","Success","Error","statusText","data","method","deserializeUser","email","html_url","apiUrls","repos_url","avatar_url","bio","deserializeUserRepos","language","isPrivate","private","stargazers_count","watchersCount","watchers_count","fullName","full_name","deserializeUserRepo","filter","userApi","findUser","path","get","getMostPopularRepos","items","userInitialState","reposInitialState","useSearchUser","userState","setUserState","reposState","setReposState","handleSearch","then","userFetchResponse","message","reposFetchResponse","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cae873a.chunk.js","sourcesContent":["import css from '@emotion/css';\n\nexport const appBackground = css`\n  min-height: 100vh;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n`;\n\nexport const container = css`\n  max-width: 900px;\n  width: 100%;\n  margin: 20px auto;\n  padding: 0 30px;\n`;\n\nexport const header = css`\n  background-color: #414141;\n  width: 100%;\n  color: #d9b792;\n`;\n\nexport const content = css`\n  width: 100%;\n`;\n\nexport const title = css`\n  text-transform: uppercase;\n  font-weight: 700;\n`;\n","import React from 'react';\nimport { appBackground, container, header, title, content } from './styled';\n\ninterface IProps {\n  title: string;\n  header: React.ReactNode;\n}\n\nconst Layout: React.FC<IProps> = props => {\n  return (\n    <div css={appBackground}>\n      <header css={header}>\n        <div css={container}>\n          <h1 css={title}>{props.title}</h1>\n          {props.header}\n        </div>\n      </header>\n      <main css={content}>\n        <div css={container}>{props.children}</div>\n      </main>\n    </div>\n  );\n};\n\nexport default Layout;\n","import css from '@emotion/css';\nimport { lighten } from 'polished';\nimport { keyframes } from '@emotion/core';\n\nexport const title = css`\n  margin: 0;\n  margin-bottom: 10px;\n`;\n\nexport const container = css`\n  align-items: flex-start;\n`;\n\nexport const link = css`\n  color: inherit;\n`;\n\nexport const shine = keyframes`\n  0% {\n    background-position: 100% 50%;\n  }\n\n  100% {\n    background-position: 0 50%;\n  }\n`;\n\nexport const loadingAnimation = (color = '#dde2e6', lightenAmount = 0.05) => css`\n  background-image: linear-gradient(\n    90deg,\n    ${lighten(lightenAmount, color)} 25%,\n    ${color} 37%,\n    ${lighten(lightenAmount, color)} 63%\n  );\n  animation: ${shine} 1.4s ease infinite;\n  background-size: 400% 100%;\n`;\n\nexport const listItemDummy = css`\n  ${loadingAnimation()}\n  height: 14px;\n  margin-top: 5px;\n  width: 200px;\n`;\n","import css from '@emotion/css';\n\nexport const list = css`\n  padding: 0;\n  margin: 0;\n  list-style: none;\n`;\n\nexport const listItem = css`\n  /* color: #fff; */\n`;\n","import React from 'react';\nimport { list } from './styled';\n\nconst List: React.FC = props => {\n  return <ul css={list}>{props.children}</ul>;\n};\n\nexport default List;\n","import React from 'react';\nimport { listItem } from './styled';\n\nconst ListItem: React.FC = props => {\n  return <li css={listItem}>{props.children}</li>;\n};\n\nexport default ListItem;\n","import css from '@emotion/css';\n\nexport const container = css`\n  /* text-align: center; */\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  justify-content: center;\n  border: 1px solid #e2e2e2;\n  border-radius: 4px;\n  padding: 20px;\n  box-sizing: border-box;\n  color: #414141;\n  margin: 10px 0;\n  transition: 1s ease-in-out all;\n`;\n","import React from 'react';\nimport { SerializedStyles } from '@emotion/css';\nimport { container } from './styled';\n\ninterface IProps {\n  isLoading?: boolean;\n  error?: Maybe<string>;\n  cssStyles?: SerializedStyles;\n  isEmpty?: boolean;\n  loadingState?: React.ReactNode;\n}\n\nconst ContentBox: React.FC<IProps> = ({ cssStyles, isLoading, children, error, isEmpty, loadingState }) => {\n  if (isLoading) {\n    return <div css={[container, cssStyles]}>{loadingState || 'Loading'}</div>;\n  }\n\n  if (error) {\n    return <div css={[container, cssStyles]}>{error}</div>;\n  }\n\n  if (isEmpty) {\n    return <div css={[container, cssStyles]}>Empty</div>;\n  }\n\n  return <div css={[container, cssStyles]}>{children}</div>;\n};\n\nexport default ContentBox;\n","import React from 'react';\nimport { listItemDummy, title } from './styled';\nimport { List } from '../list';\n\nconst UserReposSkeleton: React.FC = () => {\n  return (\n    <List>\n      <h4 css={title}>Most popular repositories:</h4>\n      <div css={listItemDummy} />\n      <div css={listItemDummy} />\n      <div css={listItemDummy} />\n    </List>\n  );\n};\n\nexport default UserReposSkeleton;\n","import React from 'react';\nimport { title, link, container } from './styled';\nimport { IUserRepository } from '../../services/api/user/interfaces';\nimport { List, ListItem } from '../list';\nimport { ContentBox } from '../content-box';\nimport UserReposSkeleton from './skeleton';\n\ninterface IProps {\n  repos: Maybe<IUserRepository[]>;\n  isLoading?: boolean;\n  error: Maybe<string>;\n}\n\nconst UserRepos: React.FC<IProps> = ({ repos, isLoading, error }) => {\n  return (\n    <ContentBox\n      cssStyles={container}\n      isLoading={isLoading}\n      error={error}\n      isEmpty={!repos || repos.length === 0}\n      loadingState={<UserReposSkeleton />}\n    >\n      <h4 css={title}>Most popular repositories:</h4>\n      <List>\n        {repos &&\n          repos.map(repo => (\n            <ListItem key={repo.id}>\n              <a css={link} href={repo.url}>\n                {repo.name}\n              </a>\n              ({repo.starsCount})\n            </ListItem>\n          ))}\n      </List>\n    </ContentBox>\n  );\n};\n\nexport default UserRepos;\n","import css from '@emotion/css';\nimport { lighten } from 'polished';\nimport { keyframes } from '@emotion/core';\n\nexport const avatar = css`\n  width: 200px;\n  height: 200px;\n  border-radius: 100px;\n  border: 1px solid #e2e2e2;\n`;\n\nexport const name = css`\n  color: #414141;\n  font-weight: normal;\n  margin: 0;\n  margin-top: 10px;\n`;\n\nexport const nameDummy = css`\n  height: 14px;\n  width: 200px;\n  margin: 0 auto;\n  margin-top: 10px;\n`;\n\nexport const description = css`\n  color: #414141;\n  margin: 0;\n  margin-top: 10px;\n`;\n\nexport const descriptionDummy = css`\n  height: 14px;\n  max-width: 400px;\n  width: 100%;\n  margin: 0 auto;\n  margin-top: 10px;\n`;\n\nexport const shine = keyframes`\n  0% {\n    background-position: 100% 50%;\n  }\n\n  100% {\n    background-position: 0 50%;\n  }\n`;\n\nexport const loadingAnimation = (color = '#dde2e6', lightenAmount = 0.05) => css`\n  background-image: linear-gradient(\n    90deg,\n    ${lighten(lightenAmount, color)} 25%,\n    ${color} 37%,\n    ${lighten(lightenAmount, color)} 63%\n  );\n  animation: ${shine} 1.4s ease infinite;\n  background-size: 400% 100%;\n`;\n\nexport const dummy = css`\n  ${loadingAnimation()}\n`;\n","export enum FontSize {\n  Text = '14px'\n}\n","import React from 'react';\nimport { avatar, name, description, dummy, nameDummy, descriptionDummy } from './styled';\n\nconst UserInfoSkeleton: React.FC = () => {\n  return (\n    <>\n      <div css={[avatar, dummy]} />\n      <div css={[name, nameDummy, dummy]} />\n      <div css={[description, descriptionDummy, dummy]} />\n    </>\n  );\n};\n\nexport default UserInfoSkeleton;\n","import React from 'react';\nimport { avatar, name, description } from './styled';\nimport { IUser } from '../../services/api/user/interfaces';\nimport { ContentBox } from '../content-box';\nimport UserInfoSkeleton from './skeleton';\n\ninterface IProps {\n  user: Maybe<IUser>;\n  isLoading?: boolean;\n  error: Maybe<string>;\n}\n\nconst UserInfo: React.FC<IProps> = ({ user, error, isLoading }) => {\n  return (\n    <ContentBox isLoading={isLoading} error={error} isEmpty={!user} loadingState={<UserInfoSkeleton />}>\n      {user && (\n        <>\n          {user.avatarUrl && (\n            <a href={user.url}>\n              <img css={avatar} src={user.avatarUrl} alt={`${user.name} avatar`} />\n            </a>\n          )}\n          <h5 css={name}>{user.name || user.login}</h5>\n          {user.description && <p css={description}>{user.description}</p>}\n        </>\n      )}\n    </ContentBox>\n  );\n};\n\nexport default UserInfo;\n","import css from '@emotion/css';\nimport { FontSize } from '../../constants/font-size';\n\nexport const field = css`\n  font-size: ${FontSize.Text};\n  box-sizing: border-box;\n  display: flex;\n  text-align: left;\n  flex-wrap: wrap;\n  align-items: flex-start;\n  margin-bottom: 20px;\n\n  input {\n    display: block;\n    width: 100%;\n    border: 1px solid #fff;\n    color: #fff;\n    border-radius: 4px;\n    margin: 0;\n    padding: 10px;\n    box-sizing: border-box;\n    background-color: transparent;\n    margin-top: 10px;\n  }\n`;\n","import React from 'react';\nimport { field } from './styled';\n\ninterface IProps {\n  name: string;\n  value: string;\n  label: string;\n  onChange: React.ChangeEventHandler;\n}\n\nconst Input: React.FC<IProps> = ({ label, onChange, name, value }) => {\n  return (\n    <label css={field}>\n      {label}\n      <input type=\"text\" name={name} value={value} onChange={onChange} />\n    </label>\n  );\n};\n\nexport default Input;\n","import React, { useRef, useState, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport Input from './input';\n\ninterface IProps {\n  delay?: number;\n  name: string;\n  label: string;\n  onChange: (value: string) => void;\n}\n\nconst SearchInput: React.FC<IProps> = ({ onChange, delay, ...restProps }) => {\n  const [searchPhrase, setSearchPhrase] = useState('');\n  const debouncedChangeHandler = useRef(debounce(onChange, delay));\n\n  const handleChange = useCallback<React.ChangeEventHandler<HTMLInputElement>>(\n    e => {\n      const { value } = e.target;\n      setSearchPhrase(value);\n      debouncedChangeHandler.current(value);\n    },\n    [setSearchPhrase]\n  );\n\n  return <Input {...restProps} value={searchPhrase} onChange={handleChange} />;\n};\n\nSearchInput.defaultProps = {\n  delay: 500\n};\n\nexport default SearchInput;\n","export enum HTTPStatus {\n  Success = 200,\n  NotFound = 404\n}\n","import axios, { AxiosInstance, Method } from 'axios';\nimport { HTTPStatus } from '../../constants/http-status';\n\nexport interface IRequestOptions {\n  url: string;\n  method: Method;\n}\n\nexport interface IRequestResult<TResult> {\n  result: TResult | null;\n  error: Error | null;\n}\n\nclass ApiClient {\n  api: AxiosInstance;\n\n  constructor() {\n    this.api = axios.create({\n      baseURL: 'https://api.github.com'\n    });\n  }\n\n  async request<TResult>(options: IRequestOptions): Promise<IRequestResult<TResult>> {\n    const requestResult: IRequestResult<TResult> = {\n      result: null,\n      error: null\n    };\n\n    try {\n      const response = await this.api.request(options);\n\n      if (response.status !== HTTPStatus.Success) {\n        requestResult.error = new Error(response.statusText);\n      } else {\n        requestResult.result = response.data;\n      }\n    } catch (e) {\n      requestResult.error = e;\n    }\n\n    return requestResult;\n  }\n\n  get<TResult>(url: string): Promise<IRequestResult<TResult>> {\n    return this.request<TResult>({ method: 'GET', url });\n  }\n}\n\nconst apiClient = new ApiClient();\n\nexport default apiClient;\n","import { IUser, IRawUser, IRawUserRepository, IUserRepository } from './interfaces';\n\nexport function deserializeUser(data: IRawUser | null): IUser | null {\n  if (!data) {\n    return null;\n  }\n\n  const { id, name, login, email } = data;\n\n  return {\n    id,\n    login,\n    name,\n    email,\n    url: data.html_url,\n    apiUrls: {\n      repos: data.repos_url\n    },\n    avatarUrl: data.avatar_url,\n    description: data.bio\n  };\n}\n\nexport function deserializeUserRepo(data: IRawUserRepository | null): IUserRepository | null {\n  if (!data) {\n    return null;\n  }\n\n  const { id, name, language } = data;\n\n  return {\n    id,\n    name,\n    language,\n    isPrivate: data.private,\n    starsCount: data.stargazers_count,\n    watchersCount: data.watchers_count,\n    url: data.html_url,\n    fullName: data.full_name\n  };\n}\n\nexport function deserializeUserRepos(data: IRawUserRepository[] | null): IUserRepository[] {\n  if (!data || data === null) {\n    return [];\n  }\n\n  const filterRepos = (repo: IUserRepository | null): repo is IUserRepository => repo !== null;\n\n  return data.map(repo => deserializeUserRepo(repo)).filter(filterRepos);\n}\n","import apiClient, { IRequestResult } from '../api-client';\nimport { IUser, IRawUser, IUserRepository, IRawUserRepository } from './interfaces';\nimport { deserializeUser, deserializeUserRepos } from './user-serializer';\n\nconst userApi = {\n  async findUser(login: string): Promise<IRequestResult<IUser>> {\n    if (!login) {\n      return {\n        result: null,\n        error: new Error('Please provide user login')\n      };\n    }\n\n    const path = `/users/${login}`;\n\n    const requestResult = await apiClient.get<IRawUser>(path);\n\n    return {\n      ...requestResult,\n      result: deserializeUser(requestResult.result)\n    };\n  },\n\n  async getMostPopularRepos(login: string): Promise<IRequestResult<IUserRepository[]>> {\n    if (!login) {\n      return {\n        result: null,\n        error: new Error('Please provide user login')\n      };\n    }\n\n    const path = `/search/repositories?q=user:${login}&sort=stars&order=desc&per_page=3`;\n\n    const requestResult = await apiClient.get<{\n      items: IRawUserRepository[];\n    }>(path);\n\n    return {\n      ...requestResult,\n      result: deserializeUserRepos(requestResult.result && requestResult.result.items)\n    };\n  }\n};\n\nexport default userApi;\n","import { useState, useCallback } from 'react';\nimport { IUserRepository, IUser } from '../services/api/user/interfaces';\nimport { userApi } from '../services/api/user';\n\ninterface IUserState {\n  isLoading: boolean;\n  error: Maybe<string>;\n  user: Maybe<IUser>;\n}\n\ninterface IReposState {\n  isLoading: boolean;\n  error: Maybe<string>;\n  repos: Maybe<IUserRepository[]>;\n}\n\nexport const userInitialState = { isLoading: false, error: null, user: null };\nexport const reposInitialState = { isLoading: false, error: null, repos: null };\n\ninterface IHookApi {\n  userState: IUserState;\n  reposState: IReposState;\n  handleSearch: (value: string) => void;\n}\n\nfunction useSearchUser(): IHookApi {\n  const [userState, setUserState] = useState<IUserState>(userInitialState);\n  const [reposState, setReposState] = useState<IReposState>(reposInitialState);\n\n  const handleSearch = useCallback(\n    (value: string) => {\n      if (value === '') {\n        setUserState(userInitialState);\n        setReposState(reposInitialState);\n        return;\n      }\n\n      setUserState({ ...userInitialState, isLoading: true });\n      setReposState({ ...reposInitialState, isLoading: true });\n\n      userApi.findUser(value).then(userFetchResponse => {\n        if (userFetchResponse.error) {\n          setUserState({ ...userInitialState, error: userFetchResponse.error.message });\n          setReposState({ ...reposInitialState });\n          return;\n        }\n\n        if (userFetchResponse.result) {\n          setUserState({ ...userInitialState, user: userFetchResponse.result });\n\n          userApi.getMostPopularRepos(value).then(reposFetchResponse => {\n            if (reposFetchResponse.error) {\n              setReposState({ ...reposInitialState, error: reposFetchResponse.error.message });\n              return;\n            }\n\n            if (reposFetchResponse.result) {\n              setReposState({ ...reposInitialState, repos: reposFetchResponse.result });\n            }\n          });\n        }\n      });\n    },\n    [setUserState, setReposState]\n  );\n\n  return {\n    userState,\n    reposState,\n    handleSearch\n  };\n}\n\nexport default useSearchUser;\n","import React from 'react';\nimport { Layout } from './components/layout';\nimport { UserRepos } from './components/user-repos';\nimport { UserInfo } from './components/user-info';\nimport { SearchInput } from './components/search-input';\nimport { useSearchUser } from './hooks';\n\nconst App: React.FC = () => {\n  const { userState, reposState, handleSearch } = useSearchUser();\n\n  return (\n    <Layout title=\"Github search\" header={<SearchInput onChange={handleSearch} name=\"Search\" label=\"Find user\" />}>\n      <>\n        <UserInfo user={userState.user} isLoading={userState.isLoading} error={userState.error} />\n        {userState.user && (\n          <UserRepos repos={reposState.repos} isLoading={reposState.isLoading} error={reposState.error} />\n        )}\n      </>\n    </Layout>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'normalize.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}